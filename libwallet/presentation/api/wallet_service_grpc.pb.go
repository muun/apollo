// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: wallet_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_DeleteWallet_FullMethodName                  = "/rpc.WalletService/DeleteWallet"
	WalletService_NfcTransmit_FullMethodName                   = "/rpc.WalletService/NfcTransmit"
	WalletService_SetupSecurityCard_FullMethodName             = "/rpc.WalletService/SetupSecurityCard"
	WalletService_ResetSecurityCard_FullMethodName             = "/rpc.WalletService/ResetSecurityCard"
	WalletService_SignMessageSecurityCard_FullMethodName       = "/rpc.WalletService/SignMessageSecurityCard"
	WalletService_StartDiagnosticSession_FullMethodName        = "/rpc.WalletService/StartDiagnosticSession"
	WalletService_PerformDiagnosticScanForUtxos_FullMethodName = "/rpc.WalletService/PerformDiagnosticScanForUtxos"
	WalletService_SubmitDiagnosticLog_FullMethodName           = "/rpc.WalletService/SubmitDiagnosticLog"
	WalletService_StartChallengeSetup_FullMethodName           = "/rpc.WalletService/StartChallengeSetup"
	WalletService_FinishRecoveryCodeSetup_FullMethodName       = "/rpc.WalletService/FinishRecoveryCodeSetup"
	WalletService_Save_FullMethodName                          = "/rpc.WalletService/Save"
	WalletService_Get_FullMethodName                           = "/rpc.WalletService/Get"
	WalletService_Delete_FullMethodName                        = "/rpc.WalletService/Delete"
	WalletService_SaveBatch_FullMethodName                     = "/rpc.WalletService/SaveBatch"
	WalletService_GetBatch_FullMethodName                      = "/rpc.WalletService/GetBatch"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	DeleteWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OperationStatus, error)
	// V2 - use then discard API
	NfcTransmit(ctx context.Context, in *NfcTransmitRequest, opts ...grpc.CallOption) (*NfcTransmitResponse, error)
	// V3 - NFC security cards Native->Libwallet API
	SetupSecurityCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*XpubResponse, error)
	ResetSecurityCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignMessageSecurityCard(ctx context.Context, in *SignMessageSecurityCardRequest, opts ...grpc.CallOption) (*SignMessageSecurityCardResponse, error)
	// Diagnostic Mode API
	StartDiagnosticSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagnosticSessionDescriptor, error)
	PerformDiagnosticScanForUtxos(ctx context.Context, in *DiagnosticSessionDescriptor, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanProgressUpdate], error)
	SubmitDiagnosticLog(ctx context.Context, in *DiagnosticSessionDescriptor, opts ...grpc.CallOption) (*DiagnosticSubmitStatus, error)
	StartChallengeSetup(ctx context.Context, in *ChallengeSetupRequest, opts ...grpc.CallOption) (*SetupChallengeResponse, error)
	FinishRecoveryCodeSetup(ctx context.Context, in *FinishRecoveryCodeSetupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Key-Value Storage
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveBatch(ctx context.Context, in *SaveBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) DeleteWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OperationStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, WalletService_DeleteWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) NfcTransmit(ctx context.Context, in *NfcTransmitRequest, opts ...grpc.CallOption) (*NfcTransmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NfcTransmitResponse)
	err := c.cc.Invoke(ctx, WalletService_NfcTransmit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SetupSecurityCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*XpubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XpubResponse)
	err := c.cc.Invoke(ctx, WalletService_SetupSecurityCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ResetSecurityCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_ResetSecurityCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignMessageSecurityCard(ctx context.Context, in *SignMessageSecurityCardRequest, opts ...grpc.CallOption) (*SignMessageSecurityCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignMessageSecurityCardResponse)
	err := c.cc.Invoke(ctx, WalletService_SignMessageSecurityCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StartDiagnosticSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagnosticSessionDescriptor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiagnosticSessionDescriptor)
	err := c.cc.Invoke(ctx, WalletService_StartDiagnosticSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PerformDiagnosticScanForUtxos(ctx context.Context, in *DiagnosticSessionDescriptor, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanProgressUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[0], WalletService_PerformDiagnosticScanForUtxos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiagnosticSessionDescriptor, ScanProgressUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_PerformDiagnosticScanForUtxosClient = grpc.ServerStreamingClient[ScanProgressUpdate]

func (c *walletServiceClient) SubmitDiagnosticLog(ctx context.Context, in *DiagnosticSessionDescriptor, opts ...grpc.CallOption) (*DiagnosticSubmitStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiagnosticSubmitStatus)
	err := c.cc.Invoke(ctx, WalletService_SubmitDiagnosticLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StartChallengeSetup(ctx context.Context, in *ChallengeSetupRequest, opts ...grpc.CallOption) (*SetupChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetupChallengeResponse)
	err := c.cc.Invoke(ctx, WalletService_StartChallengeSetup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FinishRecoveryCodeSetup(ctx context.Context, in *FinishRecoveryCodeSetupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_FinishRecoveryCodeSetup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, WalletService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SaveBatch(ctx context.Context, in *SaveBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_SaveBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchResponse)
	err := c.cc.Invoke(ctx, WalletService_GetBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	DeleteWallet(context.Context, *emptypb.Empty) (*OperationStatus, error)
	// V2 - use then discard API
	NfcTransmit(context.Context, *NfcTransmitRequest) (*NfcTransmitResponse, error)
	// V3 - NFC security cards Native->Libwallet API
	SetupSecurityCard(context.Context, *emptypb.Empty) (*XpubResponse, error)
	ResetSecurityCard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SignMessageSecurityCard(context.Context, *SignMessageSecurityCardRequest) (*SignMessageSecurityCardResponse, error)
	// Diagnostic Mode API
	StartDiagnosticSession(context.Context, *emptypb.Empty) (*DiagnosticSessionDescriptor, error)
	PerformDiagnosticScanForUtxos(*DiagnosticSessionDescriptor, grpc.ServerStreamingServer[ScanProgressUpdate]) error
	SubmitDiagnosticLog(context.Context, *DiagnosticSessionDescriptor) (*DiagnosticSubmitStatus, error)
	StartChallengeSetup(context.Context, *ChallengeSetupRequest) (*SetupChallengeResponse, error)
	FinishRecoveryCodeSetup(context.Context, *FinishRecoveryCodeSetupRequest) (*emptypb.Empty, error)
	// Key-Value Storage
	Save(context.Context, *SaveRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	SaveBatch(context.Context, *SaveBatchRequest) (*emptypb.Empty, error)
	GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) DeleteWallet(context.Context, *emptypb.Empty) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWallet not implemented")
}
func (UnimplementedWalletServiceServer) NfcTransmit(context.Context, *NfcTransmitRequest) (*NfcTransmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NfcTransmit not implemented")
}
func (UnimplementedWalletServiceServer) SetupSecurityCard(context.Context, *emptypb.Empty) (*XpubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSecurityCard not implemented")
}
func (UnimplementedWalletServiceServer) ResetSecurityCard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSecurityCard not implemented")
}
func (UnimplementedWalletServiceServer) SignMessageSecurityCard(context.Context, *SignMessageSecurityCardRequest) (*SignMessageSecurityCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessageSecurityCard not implemented")
}
func (UnimplementedWalletServiceServer) StartDiagnosticSession(context.Context, *emptypb.Empty) (*DiagnosticSessionDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDiagnosticSession not implemented")
}
func (UnimplementedWalletServiceServer) PerformDiagnosticScanForUtxos(*DiagnosticSessionDescriptor, grpc.ServerStreamingServer[ScanProgressUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method PerformDiagnosticScanForUtxos not implemented")
}
func (UnimplementedWalletServiceServer) SubmitDiagnosticLog(context.Context, *DiagnosticSessionDescriptor) (*DiagnosticSubmitStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDiagnosticLog not implemented")
}
func (UnimplementedWalletServiceServer) StartChallengeSetup(context.Context, *ChallengeSetupRequest) (*SetupChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChallengeSetup not implemented")
}
func (UnimplementedWalletServiceServer) FinishRecoveryCodeSetup(context.Context, *FinishRecoveryCodeSetupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRecoveryCodeSetup not implemented")
}
func (UnimplementedWalletServiceServer) Save(context.Context, *SaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedWalletServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWalletServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWalletServiceServer) SaveBatch(context.Context, *SaveBatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBatch not implemented")
}
func (UnimplementedWalletServiceServer) GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_DeleteWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeleteWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeleteWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeleteWallet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_NfcTransmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfcTransmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).NfcTransmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_NfcTransmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).NfcTransmit(ctx, req.(*NfcTransmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SetupSecurityCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SetupSecurityCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SetupSecurityCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SetupSecurityCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ResetSecurityCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ResetSecurityCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ResetSecurityCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ResetSecurityCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignMessageSecurityCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageSecurityCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignMessageSecurityCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SignMessageSecurityCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignMessageSecurityCard(ctx, req.(*SignMessageSecurityCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StartDiagnosticSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StartDiagnosticSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StartDiagnosticSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StartDiagnosticSession(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PerformDiagnosticScanForUtxos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnosticSessionDescriptor)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).PerformDiagnosticScanForUtxos(m, &grpc.GenericServerStream[DiagnosticSessionDescriptor, ScanProgressUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_PerformDiagnosticScanForUtxosServer = grpc.ServerStreamingServer[ScanProgressUpdate]

func _WalletService_SubmitDiagnosticLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnosticSessionDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SubmitDiagnosticLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SubmitDiagnosticLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SubmitDiagnosticLog(ctx, req.(*DiagnosticSessionDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StartChallengeSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StartChallengeSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StartChallengeSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StartChallengeSetup(ctx, req.(*ChallengeSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FinishRecoveryCodeSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRecoveryCodeSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FinishRecoveryCodeSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FinishRecoveryCodeSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FinishRecoveryCodeSetup(ctx, req.(*FinishRecoveryCodeSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SaveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SaveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SaveBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SaveBatch(ctx, req.(*SaveBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBatch(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteWallet",
			Handler:    _WalletService_DeleteWallet_Handler,
		},
		{
			MethodName: "NfcTransmit",
			Handler:    _WalletService_NfcTransmit_Handler,
		},
		{
			MethodName: "SetupSecurityCard",
			Handler:    _WalletService_SetupSecurityCard_Handler,
		},
		{
			MethodName: "ResetSecurityCard",
			Handler:    _WalletService_ResetSecurityCard_Handler,
		},
		{
			MethodName: "SignMessageSecurityCard",
			Handler:    _WalletService_SignMessageSecurityCard_Handler,
		},
		{
			MethodName: "StartDiagnosticSession",
			Handler:    _WalletService_StartDiagnosticSession_Handler,
		},
		{
			MethodName: "SubmitDiagnosticLog",
			Handler:    _WalletService_SubmitDiagnosticLog_Handler,
		},
		{
			MethodName: "StartChallengeSetup",
			Handler:    _WalletService_StartChallengeSetup_Handler,
		},
		{
			MethodName: "FinishRecoveryCodeSetup",
			Handler:    _WalletService_FinishRecoveryCodeSetup_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _WalletService_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WalletService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WalletService_Delete_Handler,
		},
		{
			MethodName: "SaveBatch",
			Handler:    _WalletService_SaveBatch_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _WalletService_GetBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerformDiagnosticScanForUtxos",
			Handler:       _WalletService_PerformDiagnosticScanForUtxos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wallet_service.proto",
}
