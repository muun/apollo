buildscript {
    ext.nav_version = "2.4.1"

    dependencies { // Add third party gradle plugins
        classpath 'com.google.gms:google-services:4.3.15'    // Google Services plugin
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.6'

        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jetbrains.kotlin.android'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"

apply from: 'houston.gradle'
apply from: "${project.rootDir}/linters/checkstyle/check-android.gradle"
apply from: "${project.rootDir}/linters/pmd/check-android.gradle"

// spotbugs is kinda broken for android projects
// it doesnt recognize what it has to check from android settings and needs a lot of hacking to work
// https://github.com/spotbugs/spotbugs-gradle-plugin/issues/90
//apply from: "${project.rootDir}/linters/findbugs/check-android.gradle"


check.dependsOn 'lint'

/**
 * Insert quotes around string fields that are injected literally into code, like a C macro.
 */
static def quote(string) {
    return "\"" + string + "\""
}

/**
 * Returns a prefix of the current commit hash.
 */
static def commitTag() {
    return 'git rev-parse --short HEAD'.execute().text.trim().substring(0, 7)
}

/**
 * Returns the name of the current git branch, truncated to 20 chars.
 */
static def branchName() {
    def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    return branchName.substring(0, Math.min(branchName.length(), 20))
}

/**
 * Configure external links for a given product flavor.
 */
static def configExternalLinks(productFlavor, String host) {
    String verifyPath = "/link/verify-v2/index.html"
    String authorizePath = "/link/authorize/index.html"
    String changePasswdPath = "/link/confirm/index.html"
    String rcLoginAuthPath = "/link/authorize-rc/index.html"

    // Required for AndroidManifest:
    productFlavor.resValue "string", "muun_link_host", host
    productFlavor.resValue "string", "verify_link_path", verifyPath
    productFlavor.resValue "string", "authorize_link_path", authorizePath
    productFlavor.resValue "string", "confirm_link_path", changePasswdPath
    productFlavor.resValue "string", "rc_login_authorize_link_path", rcLoginAuthPath

    // Required for code access in action layer:
    productFlavor.buildConfigField "String", "MUUN_LINK_HOST", quote(host)
    productFlavor.buildConfigField "String", "VERIFY_LINK_PATH", quote(verifyPath)
    productFlavor.buildConfigField "String", "AUTHORIZE_LINK_PATH", quote(authorizePath)
    productFlavor.buildConfigField "String", "CONFIRM_LINK_PATH", quote(changePasswdPath)
    productFlavor.buildConfigField "String", "RC_LOGIN_AUTHORIZE_LINK_PATH", quote(rcLoginAuthPath)
}


android {
    compileSdkVersion 33

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "io.muun.apollo"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode 1105
        versionName "51.5"

        // Needed to make sure these classes are available in the main DEX file for API 19
        // See: https://spin.atomicobject.com/2018/07/16/support-kitkat-multidex/
        multiDexKeepProguard file('./proguard/proguard-multidex.pro')

        // Use default Proguard file, bundled with Android Gradle Plugin
        // See: https://foreachi.com/android/androidx-proguard/
        proguardFiles getDefaultProguardFile("proguard-android.txt")
        proguardFiles files {
            file('./proguard').listFiles().findAll { it.path.endsWith('.pro') }
        }.asList().toArray()

        // Debug application class, which is interpolated into AndroidManifest.xml
        manifestPlaceholders = [
                mainApplicationClass: 'ApolloDebugApplication',
                usesCleartextTraffic: 'true'
        ]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "COMMIT", quote(commitTag()))
        buildConfigField("String", "BRANCH", quote(branchName()))
        buildConfigField("boolean", "PRODUCTION", "false")
        buildConfigField("boolean", "RELEASE", "false")
    }

    buildTypes {
        debug {
            debuggable true
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
        }

        minified {
            debuggable true
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
        }

        release {
            debuggable false
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true

            buildConfigField("boolean", "RELEASE", "true")
        }
    }

    flavorDimensions 'default'

    productFlavors {
        local {
            // naming
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Muun (local)"

            // external link configuration
            // This picks up our local links with localhost:8000 (local houston) while
            // explicitly putting localhost:8000 doesn't. Go figure :s
            configExternalLinks(owner, "localhost")

            // server
            houstonLocal.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("debug"))

            buildConfigField("String", "LAPP_URL", quote("http://" + getLocalIp() + ":7080"))

            signingConfig signingConfigs.debug
        }

        development {
            // naming
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Muun (dev-remote)"

            // external link configuration
            configExternalLinks(owner, "dev.muun.io")

            // server
            houstonRemoteDev.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("developmentDebug"))

            // Set empty LAPP_URL so the project builds
            buildConfigField("String", "LAPP_URL", quote(""))

            signingConfig signingConfigs.debug
        }

        staging {
            // naming
            versionNameSuffix "-" + commitTag()
            applicationIdSuffix ".staging"
            resValue "string", "app_name", "Muun (stg-remote)"

            // external link configuration
            configExternalLinks(owner, "stg.muun.io")

            // server
            houstonRemoteStg.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("staging"))

            // Set empty LAPP_URL so the project builds
            buildConfigField("String", "LAPP_URL", quote(""))

            signingConfig signingConfigs.debug
        }

        regtest {
            // naming
            applicationIdSuffix ".regtest"
            resValue "string", "app_name", "Muun (regtest-remote)"

            // external link configuration
            configExternalLinks(owner, "dev.muun.io")

            // server
            houstonRemoteRegtest.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("regtestDebug"))

            buildConfigField("String", "LAPP_URL", quote("https://pub.reg.api.muun.wtf/lapp"))

            signingConfig signingConfigs.debug
        }

        prod {
            // naming
            resValue "string", "app_name", "Muun"

            // external link configuration
            configExternalLinks(owner, "muun.com")

            // Production application class, which is interpolated into AndroidManifest.xml
            manifestPlaceholders = [
                    usesCleartextTraffic: 'false'
            ]

            // server
            houstonRemotePrd.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("release"))

            // Set empty LAPP_URL so the project builds
            buildConfigField("String", "LAPP_URL", quote(""))

            buildConfigField("boolean", "PRODUCTION", "true")
        }
    }

    sourceSets {
        prod.java.srcDirs = ['src/prod/java']

        String sharedSourceTestDir = file("${project.rootDir}/android/apollo/src/test/java")
        String sharedResourceTestDir = file("${project.rootDir}/android/apollo/src/test/resources")

        test {
            java.srcDir sharedSourceTestDir
            resources.srcDir sharedResourceTestDir
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    lintOptions {
        abortOnError true
        htmlReport true
        textReport true
        lintConfig file("${project.rootDir}/linters/android-lint/config.xml")
        baseline file("lint-baseline.xml")
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        merge 'META-INF/services/javax.money.spi.CurrencyProviderSpi'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        preDexLibraries true
        dexInProcess = true
    }

    // See: http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
        // https://www.veskoiliev.com/running-android-unit-instrumentation-tests-from-the-console/
        unitTests.all {
            testLogging {
                outputs.upToDateWhen { false }
                events "passed", "failed", "standardError"
                showCauses true
                showExceptions true
            }
        }
    }

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

}

ext {
    version_butterknife = '10.1.0'
}

dependencies {
    // modules
    implementation project(':android:apollo')
    // We explictly include libwallet to workaround a limitation of module module builds with local deps
    // https://stackoverflow.com/a/63665094/550
    api project(':android:libwallet')

    implementation 'org.slf4j:slf4j-nop:1.7.14'

    // dev tools
    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    minifiedImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'
    releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

    kapt "com.google.dagger:dagger-compiler:$global_version_dagger"

    // support library
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    def emojiVersion = "1.1.0" // We need targetSdkVersion 32 to bump
    implementation "androidx.emoji2:emoji2:$emojiVersion"

    // Remove gridrlayout-v7 once we drop minSDK version 19
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    // We need to specify versions for customtabs and cardview because some dependencies use them
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    // for WebView
    implementation 'androidx.webkit:webkit:1.1.0'

    // ui
    kapt "com.jakewharton:butterknife-compiler:$version_butterknife"
    implementation "com.jakewharton:butterknife:$version_butterknife"
    implementation "com.github.skydoves:balloon:1.2.7"

    // image processing
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    implementation 'com.github.muun:glide-transformations:3.1.2'

    // qr codes
    implementation 'com.google.zxing:core:3.3.0'                    // For showing QR codes
    implementation 'com.github.muun.barcodescanner:zxing:1.9.13'    // For scanning QR codes

    // lifecycle helpers
    implementation 'frankiesardo:icepick:3.2.0'
    kapt 'frankiesardo:icepick-processor:3.2.0'

    // testing
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'junit:junit:4.12'
    // Can't use Jake Wharton's threeten lib for test. For more info see:
    // https://github.com/JakeWharton/ThreeTenABP/issues/47
    testImplementation 'org.threeten:threetenbp:1.6.8'
    testImplementation 'br.com.six2six:fixture-factory:3.1.0'
    testImplementation 'net.sourceforge.streamsupport:streamsupport:1.5.5'
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.6.0'

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'org.assertj:assertj-core:3.8.0'
    androidTestImplementation 'org.mockito:mockito-core:3.10.0'
    androidTestImplementation 'org.mockito:mockito-android:3.10.0'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // UiAutomator Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'

    // Android Navigation Component

    // 1. Kotlin Implementation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // 2. Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // 3. Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    // Fancy animations
    implementation 'com.airbnb.android:lottie:3.5.0'
}

task start(type: Exec, dependsOn: 'assembleDebug') {
    commandLine "${rootProject.rootDir}/tools/run-apollo.sh", "debug"
}

task startStaging(type: Exec, dependsOn: 'assembleStaging') {
    commandLine "${rootProject.rootDir}/tools/run-apollo.sh", "staging"
}

apply plugin: 'com.google.gms.google-services' // Google Services plugin
// We should delete this as soon as we can. google services plugin introduces a dependency strict
// checking that checks against other projects deps too. There's a conflict with
// com.google.errorprone:error_prone_annotations. This should be fixed whenever the android deps
// bump the version of that lib.
googleServices { disableVersionCheck = true }
