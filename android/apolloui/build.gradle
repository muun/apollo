import java.util.regex.Pattern

buildscript {

    ext.nav_version = "2.7.7" // Next version upgrade requires bump minSdk to 21

    dependencies { // Add third party gradle plugins
        classpath 'com.google.gms:google-services:4.3.15'    // Google Services plugin
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.6'

        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.protobuf' version '0.9.4'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'com.squareup.sqldelight'

apply from: 'houston.gradle'
apply from: "${project.rootDir}/linters/checkstyle/check-android.gradle"
apply from: "${project.rootDir}/linters/pmd/check-android.gradle"

// spotbugs is kinda broken for android projects
// it doesnt recognize what it has to check from android settings and needs a lot of hacking to work
// https://github.com/spotbugs/spotbugs-gradle-plugin/issues/90
//apply from: "${project.rootDir}/linters/findbugs/check-android.gradle"


check.dependsOn 'lint'

/**
 * Insert quotes around string fields that are injected literally into code, like a C macro.
 */
static def quote(string) {
    return "\"" + string + "\""
}

/**
 * Returns a prefix of the current commit hash.
 */
static def commitTag() {
    return 'git rev-parse --short HEAD'.execute().text.trim().substring(0, 7)
}

/**
 * Returns the name of the current git branch.
 */
static def branchName() {
    return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

/**
 * Configure external links for a given product flavor.
 */
static def configExternalLinks(productFlavor, String host) {
    String verifyPath = "/link/verify-v2/index.html"
    String authorizePath = "/link/authorize/index.html"
    String changePasswdPath = "/link/confirm/index.html"
    String rcLoginAuthPath = "/link/authorize-rc/index.html"
    String confirmAccountDeletionPath = "/link/confirm-account-deletion/index.html"

    // Required for AndroidManifest:
    productFlavor.resValue "string", "muun_link_host", host
    productFlavor.resValue "string", "verify_link_path", verifyPath
    productFlavor.resValue "string", "authorize_link_path", authorizePath
    productFlavor.resValue "string", "confirm_link_path", changePasswdPath
    productFlavor.resValue "string", "rc_login_authorize_link_path", rcLoginAuthPath
    productFlavor.resValue "string", "confirm_account_deletion_path", confirmAccountDeletionPath

    // Required for code access in action layer:
    productFlavor.buildConfigField "String", "MUUN_LINK_HOST", quote(host)
    productFlavor.buildConfigField "String", "VERIFY_LINK_PATH", quote(verifyPath)
    productFlavor.buildConfigField "String", "AUTHORIZE_LINK_PATH", quote(authorizePath)
    productFlavor.buildConfigField "String", "CONFIRM_LINK_PATH", quote(changePasswdPath)
    productFlavor.buildConfigField "String", "RC_LOGIN_AUTHORIZE_LINK_PATH", quote(rcLoginAuthPath)
    productFlavor.buildConfigField "String", "CONFIRM_ACCOUNT_DELETION_PATH", quote(confirmAccountDeletionPath)
}

android {
    namespace "io.muun.apollo"

    compileSdk 34

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    defaultConfig {
        applicationId "io.muun.apollo"
        minSdk 19
        targetSdk 34
        versionCode 1501
        versionName "55.1"

        // Needed to make sure these classes are available in the main DEX file for API 19
        // See: https://spin.atomicobject.com/2018/07/16/support-kitkat-multidex/
        multiDexKeepProguard file('./proguard/proguard-multidex.pro')

        // Use default Proguard file, bundled with Android Gradle Plugin
        // See: https://foreachi.com/android/androidx-proguard/
        proguardFiles getDefaultProguardFile("proguard-android.txt")
        proguardFiles files {
            file('./proguard').listFiles().findAll { it.path.endsWith('.pro') }
        }.asList().toArray()

        // Debug application class, which is interpolated into AndroidManifest.xml
        manifestPlaceholders = [mainApplicationClass: 'ApolloDebugApplication', usesCleartextTraffic: 'true']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "COMMIT", quote(commitTag()))
        buildConfigField("String", "BRANCH", quote(branchName()))
        buildConfigField("boolean", "PRODUCTION", "false")
        buildConfigField("boolean", "RELEASE", "false")

        signingConfigs {
            dogfood {

                def dogfoodKeystoreProps = new Properties()
                if (file("./dogfood-keystore.properties").exists()) {
                    dogfoodKeystoreProps.load(
                            new FileInputStream(file("./dogfood-keystore.properties"))
                    )
                }

                def keystoreFilePath = dogfoodKeystoreProps['keystoreFile']
                storeFile keystoreFilePath != null ? file(keystoreFilePath) : null
                storePassword dogfoodKeystoreProps['storePassword'] ?: ""
                keyAlias dogfoodKeystoreProps['keyAlias'] ?: ""
                keyPassword dogfoodKeystoreProps['keyPassword'] ?: ""
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"

            debuggable true
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false

            splits {
                abi {
                    enable !gradle.startParameter.taskNames.any { it.contains("Dogfood") }
                    reset()
                    include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
                    universalApk false
                }
            }
        }

        // TODO research and fix this (probably after upgrade to AGP 9)
        // debuggable enabled on minified flavor clashes with having minifyEnabled and shrinkResources enabled.
        // Debuggable enabled has priority over the other flags, and those optimizations are going to be disabled.
        minified {
            debuggable true
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
        }

        release {
            debuggable false
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true

            buildConfigField("boolean", "RELEASE", "true")

            splits {
                abi {
                    enable true
                    reset()
                    include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
                    universalApk false
                }
            }
        }
    }

    flavorDimensions += 'default'

    productFlavors {
        local {
            // naming
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Muun (local)"

            // external link configuration
            // This picks up our local links with localhost:8000 (local houston) while
            // explicitly putting localhost:8000 doesn't. Go figure :s
            configExternalLinks(owner, "localhost")

            // server
            houstonLocal.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("debug"))

            buildConfigField("String", "LAPP_URL", quote("http://" + getLocalIp() + ":7080"))

            signingConfig signingConfigs.debug
        }

        regtest {
            // naming
            applicationIdSuffix ".regtest"
            resValue "string", "app_name", "Muun (regtest-remote)"

            // external link configuration
            configExternalLinks(owner, "dev.muun.io")

            // server
            houstonRemoteRegtest.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("regtestDebug"))

            buildConfigField("String", "LAPP_URL", quote("https://pub.reg.api.muun.wtf/lapp"))

            signingConfig signingConfigs.debug
        }

        prod {
            // naming
            resValue "string", "app_name", "Muun"

            // external link configuration
            configExternalLinks(owner, "muun.com")

            // Production application class, which is interpolated into AndroidManifest.xml
            manifestPlaceholders = [
                    usesCleartextTraffic: 'false'
            ]

            // server
            houstonRemotePrd.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("release"))

            // Set empty LAPP_URL so the project builds
            buildConfigField("String", "LAPP_URL", quote(""))

            buildConfigField("boolean", "PRODUCTION", "true")
        }

        dogfood {
            // naming
            versionNameSuffix "-" + commitTag()
            applicationIdSuffix ".internal.beta"
            resValue "string", "app_name", "Muun (Dogfood)"

            // external link configuration
            configExternalLinks(owner, "muun.com")

            // Production application class, which is interpolated into AndroidManifest.xml
            manifestPlaceholders = [
                    usseCleartextTraffic: 'false'
            ]

            // server
            houstonRemotePrd.each { key, value -> buildConfigField("String", key, quote(value)) }

            // We need this in order to be backward compatible with the buildType field
            // we use to send to the server. Eventually we can deprecate it
            buildConfigField("String", "OLD_BUILD_TYPE", quote("release"))

            // Set empty LAPP_URL so the project builds
            buildConfigField("String", "LAPP_URL", quote(""))

            buildConfigField("boolean", "PRODUCTION", "true")

            // App bundles with ABI split enabled
            // To mimic what we do for prod "multi apk" builds
            bundle {
                language {
                    // This property is set to true by default.
                    // You can specify `false` to turn off
                    // generating configuration APKs for language resources.
                    // These resources are instead packaged with each base and
                    // feature APK.
                    // Continue reading below to learn about situations when an app
                    // might change setting to `false`, otherwise consider leaving
                    // the default on for more optimized downloads.
                    enableSplit = false
                }
                density {
                    // This property is set to true by default.
                    enableSplit = false
                }
                abi {
                    // This property is set to true by default.
                    enableSplit = true
                }
            }

            // Default Signing config. Overridden for release buildType, see androidComponents below
            signingConfig signingConfigs.debug

        }
    }

    sourceSets {
        prod.java.srcDirs = ['src/prod/java']

        main {
            proto {
                srcDir "${project.rootDir}/libwallet/presentation/api"
            }
        }

        String sharedSourceTestDir = file("${project.rootDir}/android/apollo/src/test/java")
        String sharedResourceTestDir = file("${project.rootDir}/android/apollo/src/test/resources")

        test {
            java.srcDir sharedSourceTestDir
            resources.srcDir sharedResourceTestDir
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    lint {
        abortOnError true
        htmlReport true
        textReport true
        lintConfig file("$rootDir/linters/android-lint/config.xml")
        baseline file('lint-baseline.xml')

        // Workaround linter bug regarding our addition of test sources (e.g apollo lib). Reported
        // issues have broken location since apollo test sources aren't inside this module.
        // TODO fix this
        ignoreTestSources true
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        merge 'META-INF/services/javax.money.spi.CurrencyProviderSpi'
        exclude 'META-INF/rxjava.properties'
    }

    // See: http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
        // https://www.veskoiliev.com/running-android-unit-instrumentation-tests-from-the-console/
        unitTests.all {
            testLogging {
                outputs.upToDateWhen { false }
                events "passed", "failed", "standardError"
                showCauses true
                showExceptions true
            }
        }
    }

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

}

ext {
    // TODO this currently needs to match common's retrofit version. We should refactor to avoid
    // this discipline on our part. We probably need to extract it to a constant in top-level gradle
    version_retrofit = '2.5.0'
    version_workmanager = '2.9.0'   // Next version upgrade requires bump minSdk to 21
    version_butterknife = '10.1.0'
    version_mockk = '1.13.7'    // Latest version targeting kotlin 1.8.20
    version_lifecycle = '2.6.2' // Upcoming versions require AGP 8.3.1
    version_grpc = "1.57.2"         // This is ancient, but we're stuck until we bump minSdk to 21
}

dependencies {
    api(project(':common')) {
        // bitcoinj has a protobuf version that's really old
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }

    // modules
    // We explictly include libwallet to workaround a limitation of module module builds with local deps
    // https://stackoverflow.com/a/63665094/550
    implementation project(':android:libwallet')

    // Logging:
    implementation 'org.slf4j:slf4j-nop:1.7.14'
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Money:
    implementation 'org.javamoney:moneta-bp:1.0'
    implementation 'org.zalando:jackson-datatype-money:0.12.0'

    // Firebase:
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:32.6.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies

    // Push Notifications:
    implementation 'com.google.firebase:firebase-messaging'
    // Debugging:
    implementation 'com.google.firebase:firebase-crashlytics'
    // Analytics: Enhance Crashlytics experience (real time crash-free users + breadcrumbs)
    implementation 'com.google.firebase:firebase-analytics'

    // WorkManager: (see https://github.com/muun/muun/issues/5895)
    // Guide: https://developer.android.com/topic/libraries/architecture/workmanager/migrating-fb
    implementation "androidx.work:work-runtime:$version_workmanager" // api as needs to be init at app.OnCreate

    // Networking:
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-jackson:$version_retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$version_retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // Google APIs
    implementation 'com.google.android.gms:play-services-auth:20.6.0'
    implementation 'com.google.api-client:google-api-client-android:2.7.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev136-1.25.0'
    implementation 'com.google.http-client:google-http-client-gson:1.45.0'

    // Kotlin:
    // Kotlin serialization runtime library. Note that while the plugin has version the same as
    // the compiler one, runtime library has different coordinates, repository and versioning.
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1"

    // Detect root devices (for error reports metadata and fraud control)
    implementation 'com.scottyab:rootbeer-lib:0.1.0'

    // Google Play Integrity
    implementation 'com.google.android.play:integrity:1.1.0'

    // dev tools
    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    minifiedImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'
    releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

    implementation 'androidx.sqlite:sqlite-framework:2.0.1'

    // ReactiveX:
    implementation 'io.reactivex:rxjava:1.3.0'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.github.akarnokd:rxjava2-interop:0.13.7'

    // Dependency injection:
    implementation "com.google.dagger:dagger:$global_version_dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$global_version_dagger"
    kapt "com.google.dagger:dagger-compiler:$global_version_dagger"

    // Android support:
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    def emojiVersion = "1.1.0" // We need targetSdkVersion 32 to bump
    implementation "androidx.emoji2:emoji2:$emojiVersion"

    // Remove gridrlayout-v7 once we drop minSDK version 19
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    // We need to specify versions for customtabs and cardview because some dependencies use them
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$version_lifecycle"
    // ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$version_lifecycle"

    // for WebView
    implementation 'androidx.webkit:webkit:1.1.0'

    // Protobuf & grpc
    api "io.grpc:grpc-protobuf-lite:$version_grpc"
    api "io.grpc:grpc-stub:$version_grpc"
    api "io.grpc:grpc-okhttp:$version_grpc"
    api "io.grpc:grpc-android:$version_grpc"

    // ui
    kapt "com.jakewharton:butterknife-compiler:$version_butterknife"
    implementation "com.jakewharton:butterknife:$version_butterknife"
    implementation "com.github.skydoves:balloon:1.2.7"

    // image processing
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    implementation 'com.github.muun:glide-transformations:3.1.2'

    // qr codes
    implementation 'com.google.zxing:core:3.3.0'                    // For showing QR codes
    implementation 'com.github.muun.barcodescanner:zxing:1.9.13'    // For scanning QR codes

    // lifecycle helpers
    implementation 'frankiesardo:icepick:3.2.0'
    kapt 'frankiesardo:icepick-processor:3.2.0'

    // Storage:
    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation "com.squareup.sqldelight:android-driver:1.5.5"
    implementation "com.squareup.sqldelight:rxjava2-extensions:1.5.5"

    // testing
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "io.mockk:mockk:$version_mockk"

    // Can't use Jake Wharton's threeten lib for test. For more info see:
    // https://github.com/JakeWharton/ThreeTenABP/issues/47
    testImplementation 'org.threeten:threetenbp:1.6.8'
    testImplementation 'br.com.six2six:fixture-factory:3.1.0'
    testImplementation 'net.sourceforge.streamsupport:streamsupport:1.5.5'
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.6.0'

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'org.assertj:assertj-core:3.8.0'
    androidTestImplementation 'org.mockito:mockito-core:3.10.0'
    androidTestImplementation 'org.mockito:mockito-android:3.10.0'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // UiAutomator Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'

    // Android Navigation Component

    // 1. Views/Fragments Integration
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // (We don't use Feature module Support for Fragments)

    // 2. Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    // Fancy animations
    implementation 'com.airbnb.android:lottie:3.5.0'
}

configurations {
    configureEach {
        // Here is a fun thing: We have to stick to grpc version 1.57.2 because
        // we support minSdk 19. Later versions require minSdk 21.
        // But... We also use google-api-client-android version 2.7.0 which has
        // a transitive dependency on a newer version of grpc-context. :/
        // This forces the dependency resolution to prevent mixed versions from
        // blowing up on runtime with a ClassNotFoundException.
        // This entire block should be deleted when we move to minSdk 21.
        resolutionStrategy {
            force "io.grpc:grpc-core:1.57.2", "io.grpc:grpc-api:1.57.2"
        }
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

// Yeap, this is the incantation required to override signingConfig ONLY for dogfoodRelease
androidComponents {
    onVariants(selector().withName(Pattern.compile(".*dogfoodRelease.*"))) { variant ->
        variant.signingConfig?.setConfig(android.signingConfigs.dogfood)
    }
}

android.applicationVariants.configureEach { variant ->
    variant.outputs.configureEach { output ->
        def baseVersionCode = versionCode as int
        def buildVersionSuffix = project.hasProperty('buildSuffix') ? project.buildSuffix : "000"

        if (!buildVersionSuffix.matches("\\d{3}")) {
            throw new GradleException("buildSuffix must be a number with 3 digits: '$buildVersionSuffix'")
        }

        def abiVersionCodeMap = ["dogfood": 1, "x86": 2, "x86_64": 3, "armeabi-v7a": 4, "arm64-v8a": 5]
        def abi = output.getFilter(com.android.build.OutputFile.ABI)
        def abiCode = 0

        if (variant.name.containsIgnoreCase('dogfood')) {
            abiCode = 1
        } else if (abi != null) {
            abiCode = abiVersionCodeMap.get(abi) ?: 0
        }

        println "baseVersionCode: $baseVersionCode"
        println "buildVersionSuffix: $buildVersionSuffix"
        println "abiCode: $abiCode"

        output.versionCodeOverride = (baseVersionCode.toString() + buildVersionSuffix + abiCode.toString()) as int

        if (System.getenv("CI")) {
            println "ABI: ${abi ?: 'universal'}, Final versionCode: ${output.versionCodeOverride}"
        }
    }
}

// Custom build check to enforce a maximum versionName length. Houston has an arbitrary max length
// of 40 chars for this and we sometimes add suffixes for dogfood app and/or debug builds.
afterEvaluate {
    def maxLength = 24
    def versionName = android.defaultConfig.versionName?.toString() ?: ""

    tasks.register("checkVersionNameLength") {
        doLast {
            if (versionName.length() > maxLength) {
                throw new GradleException(
                        "❌ versionName '${versionName}' exceeds ${maxLength} characters.\n" +
                                "Houston has size limit for this."
                )
            }
        }
    }

    tasks.named("preBuild").configure {
        dependsOn("checkVersionNameLength")
    }
}

apply plugin: 'com.google.gms.google-services' // Google Services plugin
// We should delete this as soon as we can. google services plugin introduces a dependency strict
// checking that checks against other projects deps too. There's a conflict with
// com.google.errorprone:error_prone_annotations. This should be fixed whenever the android deps
// bump the version of that lib.
googleServices { disableVersionCheck = true }

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.29.3"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$version_grpc"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc { option 'lite' }
            }
        }
    }
}
