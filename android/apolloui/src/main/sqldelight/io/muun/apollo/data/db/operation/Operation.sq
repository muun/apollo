import java.lang.Boolean;

CREATE TABLE operations (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    hid INTEGER NOT NULL UNIQUE,
    direction TEXT AS io.muun.common.model.OperationDirection NOT NULL,
    is_external INTEGER AS Boolean NOT NULL,
    sender_hid INTEGER REFERENCES public_profiles(hid),
    sender_is_external INTEGER AS Boolean NOT NULL,
    receiver_hid INTEGER REFERENCES public_profiles(hid),
    receiver_is_external INTEGER AS Boolean NOT NULL,
    receiver_address TEXT,
    receiver_address_derivation_path TEXT,
    amount_in_satoshis INTEGER NOT NULL,
    amount_in_input_currency TEXT AS javax.money.MonetaryAmount NOT NULL,
    amount_in_primary_currency TEXT AS javax.money.MonetaryAmount NOT NULL,
    fee_in_satoshis INTEGER NOT NULL,
    fee_in_input_currency TEXT AS javax.money.MonetaryAmount NOT NULL,
    fee_in_primary_currency TEXT AS javax.money.MonetaryAmount NOT NULL,
    confirmations INTEGER NOT NULL,
    hash TEXT,
    description TEXT,
    status TEXT AS io.muun.common.model.OperationStatus NOT NULL,
    creation_date TEXT AS org.threeten.bp.ZonedDateTime NOT NULL,
    exchange_rate_window_hid INTEGER NOT NULL,
    submarine_swap_houston_uuid TEXT REFERENCES submarine_swaps(houston_uuid),
    incoming_swap_houston_uuid TEXT REFERENCES incoming_swaps(houston_uuid),
    is_rbf INTEGER AS Boolean NOT NULL,
    metadata TEXT AS io.muun.common.api.OperationMetadataJson
);

insertOperation:
INSERT OR REPLACE INTO operations
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateStatus:
UPDATE operations
SET confirmations = ?, hash = ?, status = ?
WHERE hid = ?;

selectAll:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
ORDER BY creation_date DESC;

selectById:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
WHERE operations.id = ?;

selectByHid:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
WHERE operations.hid = ?;

selectLatest:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
ORDER BY operations.id DESC
LIMIT 1;

selectUnsettled:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
WHERE operations.status NOT IN (
    'SWAP_PAYED',
    'SWAP_FAILED',
    'SWAP_EXPIRED',
    'FAILED',
    'DROPPED',
    'SETTLED'
)
ORDER BY creation_date DESC;

selectByIncomingSwap:
SELECT operations.*, sender_profile.*, receiver_profile.*, swap.*, incoming_swap.*, htlc.*
FROM operations
LEFT JOIN public_profiles AS sender_profile ON sender_hid = sender_profile.hid
LEFT JOIN public_profiles AS receiver_profile ON receiver_hid = receiver_profile.hid
LEFT JOIN submarine_swaps AS swap ON submarine_swap_houston_uuid = swap.houston_uuid
LEFT JOIN incoming_swaps AS incoming_swap ON operations.incoming_swap_houston_uuid = incoming_swap.houston_uuid
LEFT JOIN incoming_swap_htlcs AS htlc ON incoming_swap.houston_uuid = htlc.incoming_swap_houston_uuid
WHERE
operations.incoming_swap_houston_uuid = ?
;

countPendingOps:
SELECT COUNT(*)
FROM operations o
WHERE
    o.direction = ?
    AND o.is_rbf = ?
    AND o.status IN ?
;

deleteAll:
DELETE FROM operations;