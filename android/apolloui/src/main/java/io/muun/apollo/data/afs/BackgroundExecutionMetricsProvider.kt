package io.muun.apollo.data.afs

import io.muun.apollo.domain.model.BackgroundEvent
import kotlinx.serialization.Serializable
import javax.inject.Inject

class BackgroundExecutionMetricsProvider @Inject constructor(
    private val metricsProvider: MetricsProvider
) {

    fun run(): BackgroundExecutionMetrics =
        BackgroundExecutionMetrics(
            metricsProvider.currentTimeMillis,
            metricsProvider.batteryLevel,
            metricsProvider.maxBatteryLevel,
            metricsProvider.batteryHealth,
            metricsProvider.batteryDischargePrediction,
            metricsProvider.batteryStatus,
            metricsProvider.totalInternalStorageInBytes,
            metricsProvider.freeInternalStorageInBytes,
            metricsProvider.freeExternalStorageInBytes.toTypedArray(),
            metricsProvider.totalExternalStorageInBytes.toTypedArray(),
            metricsProvider.totalRamInBytes,
            metricsProvider.freeRamInBytes,
            metricsProvider.dataState,
            metricsProvider.simStates.toTypedArray(),
            metricsProvider.currentNetworkTransport,
            metricsProvider.uptimeMillis,
            metricsProvider.elapsedRealtime,
            metricsProvider.bootCount,
            metricsProvider.language,
            metricsProvider.timeZoneOffsetSeconds,
            metricsProvider.telephonyNetworkRegion.orElse(""),
            metricsProvider.simRegion,
            metricsProvider.appDatadir,
            metricsProvider.vpnState,
            metricsProvider.appImportance,
            metricsProvider.displayMetrics,
            metricsProvider.usbConnected,
            metricsProvider.usbPersistConfig,
            metricsProvider.bridgeEnabled,
            metricsProvider.bridgeDaemonStatus,
            metricsProvider.developerEnabled,
            metricsProvider.proxyHttp,
            metricsProvider.proxyHttps,
            metricsProvider.proxySocks,
            metricsProvider.autoDateTime,
            metricsProvider.autoTimeZone,
            metricsProvider.timeZoneId,
            metricsProvider.dateFormat,
            metricsProvider.regionCode,
            metricsProvider.calendarIdentifier,
            metricsProvider.androidMobileRxTraffic,
            metricsProvider.simOperatorId,
            metricsProvider.mobileNetworkId,
            metricsProvider.mobileRoaming,
            metricsProvider.mobileDataStatus,
            metricsProvider.mobileRadioType,
            metricsProvider.mobileDataActivity,
            metricsProvider.networkLink,
            metricsProvider.hasNfcFeature,
            metricsProvider.hasNfcAdapter,
            metricsProvider.isNfcEnabled,
            metricsProvider.nfcAntennaPosition.map { "${it.first};${it.second}" }.toTypedArray(),
            metricsProvider.deviceSizeInMm?.let { "${it.first};${it.second}" } ?: "",
            metricsProvider.isDeviceFoldable,
            metricsProvider.isBackgroundRestricted,
            metricsProvider.latestBackgroundTimes,
            metricsProvider.telephonyNetworkRegionList
        )

    @Suppress("ArrayInDataClass")
    @Serializable
    data class BackgroundExecutionMetrics(
        private val epochInMilliseconds: Long,
        private val batteryLevel: Int,
        private val maxBatteryLevel: Int,
        private val batteryHealth: String,
        private val batteryDischargePrediction: Long?,
        private val batteryState: String,
        private val totalInternalStorage: Long,
        private val freeInternalStorage: Long,
        private val freeExternalStorage: Array<Long>,
        private val totalExternalStorage: Array<Long>,
        private val totalRamStorage: Long,
        private val freeRamStorage: Long,
        private val dataState: String,
        private val simStates: Array<String>,
        private val networkTransport: String,
        private val androidUptimeMillis: Long,
        private val androidElapsedRealtimeMillis: Long,
        private val androidBootCount: Int,
        private val language: String,
        private val timeZoneOffsetInSeconds: Long,
        private val telephonyNetworkRegion: String,
        private val simRegion: String,
        private val appDataDir: String,
        private val vpnState: Int,
        private val appImportance: Int,
        private val displayMetrics: ResourcesInfoProvider.DisplayMetricsInfo,
        private val usbConnected: Int,
        private val usbPersistConfig: String,
        private val bridgeEnabled: Int,
        private val bridgeDaemonStatus: String,
        private val developerEnabled: Int,
        private val proxyHttp: String,
        private val proxyHttps: String,
        private val proxySocks: String,
        private val autoDateTime: Int,
        private val autoTimeZone: Int,
        private val timeZoneId: String,
        private val androidDateFormat: String,
        private val regionCode: String,
        private val androidCalendarIdentifier: String,
        private val androidMobileRxTraffic: Long,
        private val androidSimOperatorId: String,
        private val androidMobileOperatorId: String,
        private val androidMobileRoaming: Boolean,
        private val androidMobileDataStatus: Int,
        private val androidMobileRadioType: Int,
        private val androidMobileDataActivity: Int,
        private val androidNetworkLink: ConnectivityInfoProvider.NetworkLink?,
        private val androidHasNfcFeature: Boolean,
        private val androidHasNfcAdapter: Boolean,
        private val androidNfcEnabled: Boolean,
        private val androidNfcAntennaPositions: Array<String>, // in mms starting bottom-left
        private val androidDeviceSizeInMms: String,
        private val androidFoldableDevice: Boolean?,
        private val isBackgroundRestricted: Boolean,
        private val bkgTimes: List<BackgroundEvent>,
        private val telephonyNetworkRegionList: List<String>,
    )
}